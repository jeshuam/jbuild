import json

workspace = dict(
  external = {
    '//third_party/gflags': dict(
      url = 'https://github.com/gflags/gflags',
      branch = 'v2.2.0',
      build = dict(
        gflags = dict(
          type = 'c++/library',
          srcs = [
            'src/gflags.cc',
            'src/gflags_completions.cc',
            'src/gflags_reporting.cc',
          ],

          hdrs = [
            'src/mutex.h',
            'src/util.h',
            '//third_party/gflags:gflags_header_gen',
          ],

          includes = [
            '.',
          ],

          compile_flags = [
            '-DGFLAGS_IS_A_DLL=0',
          ],

          linux = dict(
            link_flags = [
              '-lpthread',
            ],

            compile_flags = [
              '-DHAVE_STDINT_H',
              '-DHAVE_SYS_TYPES_H',
              '-DHAVE_INTTYPES_H',
              '-DHAVE_SYS_STAT_H',
              '-DHAVE_UNISTD_H',
              '-DHAVE_FNMATCH_H',
              '-DHAVE_STRTOLL',
              '-DHAVE_STRTOQ',
              '-DHAVE_PTHREAD',
              '-DHAVE_RWLOCK',
              '-DGFLAGS_INTTYPES_FORMAT_C99',
            ],
          ),

          windows = dict(
            srcs = [
              'src/windows_port.cc',
            ],

            compile_flags = [
              '-DOS_WINDOWS',
              '-DHAVE_SHLWAPI_H',
            ],

            link_flags = [
              'shlwapi.lib',
            ]
          ),
        ),

        gflags_header_gen = {
          'type': 'genrule',
          'in': [
            'src/config.h.in',
            'src/gflags.h.in',
            'src/gflags_declare.h.in',
            'src/gflags_completions.h.in',
            'src/gflags_ns.h.in',
          ],

          'out': [
            'config.h',
            'gflags/gflags.h',
            'gflags/gflags_declare.h',
            'gflags/gflags_completions.h',
            'gflags/gflags_gflags.h',
          ],

          'cmds': [
            '''
              awk
                '{ gsub(/^#cmakedefine /, \"//cmakedefine\");
                   print; }'
              third_party/gflags/src/config.h.in > config.h
            ''',

            '''
              awk
                '{ gsub(/@GFLAGS_ATTRIBUTE_UNUSED@/, \"\");
                   gsub(/@INCLUDE_GFLAGS_NS_H@/, \"#include \\\"gflags/gflags_gflags.h\\\"\");
                   print; }'
              third_party/gflags/src/gflags.h.in > gflags/gflags.h
            ''',

            '''
              awk
                '{ gsub(/@GFLAGS_NAMESPACE@/, \"google\");
                   print; }'
              third_party/gflags/src/gflags_completions.h.in > gflags/gflags_completions.h
            ''',

            '''
              awk
                '{ gsub(/@ns@/, \"gflags\");
                   gsub(/@NS@/, \"GFLAGS\");
                   print; }'
              third_party/gflags/src/gflags_ns.h.in > gflags/gflags_gflags.h
            '''
          ],

          'windows': dict(
            cmds = [
              '''
                awk 
                  '{ gsub(/@GFLAGS_NAMESPACE@/, \"google\");
                     gsub(/@(HAVE_STDINT_H|GFLAGS_INTTYPES_FORMAT_VC7)@/, \"1\");
                     gsub(/@([A-Z0-9_]+)@/, \"0\");
                     print; }'
                third_party/gflags/src/gflags_declare.h.in > gflags/gflags_declare.h
              '''
            ],
          ),

          'linux': dict(
            cmds = [
              '''
                awk 
                  '{ gsub(/@GFLAGS_NAMESPACE@/, \"google\");
                     gsub(/@(HAVE_STDINT_H|HAVE_SYS_TYPES_H|HAVE_INTTYPES_H|GFLAGS_INTTYPES_FORMAT_C99)@/, \"1\");
                     gsub(/@([A-Z0-9_]+)@/, \"0\");
                     print; }'
                third_party/gflags/src/gflags_declare.h.in > gflags/gflags_declare.h
              '''
            ],
          ),
        },
      )
    )
  }
)

print(json.dumps(workspace))
